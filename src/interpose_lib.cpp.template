#ifdef __cplusplus
extern "C" {
#endif

// include the original header in case any special types are required
#include "{{ORIGINAL_HEADER}}"

#ifdef __cplusplus
}
#endif

// printf()
#include <cstdio>

// dlsym(), dlopen() [OS X]
#include <dlfcn.h>

// std::string
#include <string>

#ifdef USE_CHRONO
// std::chrono::*
#include <chrono>
#else
// timeval, gettimeofday()
#include <sys/time.h>
#endif

namespace util
{
#ifdef __APPLE__
   // retrieving the original function call on OS X requires the library name
   static const char LIB_NAME[] = "{{APPLE_LIB_NAME}}";
#endif

   template<typename Signature>
   static auto get_function(std::string const &function) -> Signature
   {
#ifdef __APPLE__
      /** 
       ** On OS X, the original library is loaded explicitly and the function is
       ** queried from within that library. This technique does not work on linux; it
       ** results in an infinite recursion.
       **/

      // grab handle to the original library
      void *handle = dlopen(LIB_NAME, RTLD_NOW);

      // find the original function within that library
      return reinterpret_cast<Signature>(dlsym(handle, function.c_str()));
#else
      /** 
       ** Retrieving a pointer to the original function is even easier in linux. It
       ** doesn't even require the original library name. Calling dlsym() with the
       ** flag "RTLD_NEXT" returns the *next* occurrence of the specified name, which
       ** is the original library call. This does not work on OS X; it fails to find
       ** the function.
       **/

      // find the original function
      return reinterpret_cast<Signature>(dlsym(RTLD_NEXT, function.c_str()));
#endif
   }

   namespace time
   {
#ifndef USE_CHRONO
      typedef long long unsigned llu;

      static auto current() -> timeval
      {
         // store a precise time-stamp
         timeval time;

         // capture the current time
         gettimeofday(&time, NULL);

         // return the time
         return time;
      }

      static void print_call(timeval const &call, std::string const &function)
      {
         printf
         (
            "[%011llu.%06llu][call] %s()\n",
            static_cast<llu>(call.tv_sec),
            static_cast<llu>(call.tv_usec),
            function.c_str()
         );
      }

      static void print_done(timeval const &call, timeval const &done, std::string const &function)
      {
         long long unsigned diff = 
            (static_cast<llu>(done.tv_sec) * 1000000ull + static_cast<llu>(done.tv_usec)) -
            (static_cast<llu>(call.tv_sec) * 1000000ull + static_cast<llu>(call.tv_usec));

         printf
         (
            "[%011llu.%06llu][done][%llu.%06llu] %s()\n",
            static_cast<llu>(done.tv_sec),
            static_cast<llu>(done.tv_usec),
            diff / 1000000ull,
            diff % 1000000ull,
            function.c_str()
         );
      }
#endif

#ifdef USE_CHRONO
      // time_point, duration, duration_cast, high_resolution_clock
      using namespace std::chrono;

      class StampBlock
      {
         // used when outputting the current (or elapsed) time in seconds
         private: typedef duration<double> seconds;

         // timestamp before the call
         private: high_resolution_clock::time_point call;

         // function name for displaying
         private: std::string const &name;

         public: StampBlock(std::string const &name)
            :
            call(high_resolution_clock::now()),
            name(name)
         {
            // print the time-stamp
            printf("[%017.6f][call] %s()\n", duration_cast<seconds>(call.time_since_epoch()).count(), name.c_str());
         }

         public: ~StampBlock()
         {
            // record the timestamp after the call
            auto done(high_resolution_clock::now());

            // print the time-stamp and duration
            printf
            (
               "[%017.6f][done][%08.6f] %s()\n",
               duration_cast<seconds>(done.time_since_epoch()).count(),
               duration_cast<seconds>(done - call).count(),
               name.c_str()
            );
         }
      };
#else
      class StampBlock
      {
         // timestamp before the call
         private: timeval call;

         // function name for displaying
         private: std::string const &name;

         public: StampBlock(std::string const &name)
            :
            call(time::current()),
            name(name)
         {
            // print the time-stamp
            time::print_call(call, name);
         }

         public: ~StampBlock()
         {
            // record the timestamp after the call
            auto done(time::current());

            // print the time-stamp and duration
            time::print_done(call, done, name);
         }
      };
#endif

      // timestamp the entrance to and exit from a function
      template<typename Function>
      auto stamp_call(Function function, std::string const &name) -> decltype(function())
      {
         util::time::StampBlock stamp(name);
         return function();
      }
   }
}

// wraps the above function so that the user doesn't have to touch __func__
#define timestamp(call) util::time::stamp_call([&]{return call;}, __func__)

// insert the user-defined functions
#include "{{USER_DEFINED_FUNCTIONS}}"

{{FOR_EACH_FUNCTION:
static auto proxy_{{NAME}}({{ARGUMENT_LIST}}) -> {{RETURN_TYPE}}
{
   // stores the pointer to the original function
   static {{RETURN_TYPE}} (*original)({{ARGUMENT_TYPES}}) = NULL;

   // attempt to locate the original function if it hasn't already been located
   if(!original) original = util::get_function<{{RETURN_TYPE}} (*)({{ARGUMENT_TYPES}})>("{{NAME}}");

   // call the user wrapper for this function
   {{IF_NONVOID:return }}{{NAME}}(original{{,ARGUMENT_NAMES}});
}
}}

#ifdef __cplusplus
extern "C" {
#endif

{{FOR_EACH_FUNCTION:
{{RETURN_TYPE}} {{NAME}}({{ARGUMENT_LIST}})
{
   {{IF_NONVOID:return }}proxy_{{NAME}}({{ARGUMENT_NAMES}});
}
}}

#ifdef __cplusplus
}
#endif
